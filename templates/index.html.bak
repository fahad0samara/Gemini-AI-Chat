<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini AI Chat</title>
    <style>
        :root {
            --primary-color: #4a90e2;
            --bg-color: #f5f8fa;
            --text-color: #2c3e50;
            --border-color: #e1e8ed;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background: var(--bg-color);
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            text-align: center;
            padding: 1rem;
            background: white;
            border-bottom: 1px solid var(--border-color);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .chat-container {
            max-width: 1200px;
            margin: 1rem auto;
            padding: 1rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            min-height: 300px;
        }

        .message {
            max-width: 80%;
            padding: 1rem;
            border-radius: 12px;
            animation: fadeIn 0.3s ease-in-out;
            white-space: pre-wrap;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .user-message {
            background: var(--primary-color);
            color: white;
            align-self: flex-end;
        }

        .assistant-message {
            background: #f8f9fa;
            color: var(--text-color);
            align-self: flex-start;
        }

        .system-message {
            background: #ffd700;
            color: var(--text-color);
            align-self: center;
            font-style: italic;
        }

        .error-message {
            background: #ff4d4d;
            color: white;
            align-self: center;
            font-family: monospace;
        }

        .input-container {
            display: flex;
            gap: 1rem;
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .input-container input {
            flex-grow: 1;
            padding: 0.8rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
        }

        .input-container button {
            padding: 0.8rem 1.5rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .input-container button:hover {
            background: #357abd;
        }

        .typing {
            display: none;
            align-self: flex-start;
            background: #f8f9fa;
            padding: 0.8rem;
            border-radius: 12px;
            color: var(--text-color);
            font-style: italic;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Gemini AI Chat</h1>
    </div>

    <div class="chat-container">
        <div class="messages" id="messages">
            <div class="message system-message">
                Welcome! I'm your Gemini AI assistant. How can I help you today?
            </div>
        </div>
        <div class="typing" id="typing">Assistant is typing...</div>
        <div class="input-container">
            <input type="text" id="message-input" placeholder="Type your message..." autocomplete="off">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        const messagesDiv = document.getElementById('messages');
        const messageInput = document.getElementById('message-input');
        const typingDiv = document.getElementById('typing');

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                // Add user message
                addMessage(message, 'user');
                messageInput.value = '';
                
                // Show typing indicator
                typingDiv.style.display = 'block';
                
                try {
                    // Send to server
                    const response = await fetch('/send_message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ message })
                    });
                    
                    const data = await response.json();
                    
                    // Hide typing indicator
                    typingDiv.style.display = 'none';
                    
                    // Add response
                    addMessage(data.message, data.type);

                    // Log any errors to console
                    if (data.type === 'error') {
                        console.error('Server error:', data.message);
                    }
                } catch (error) {
                    // Hide typing indicator
                    typingDiv.style.display = 'none';
                    
                    // Show error
                    console.error('Network error:', error);
                    addMessage('Error: ' + error.message, 'error');
                }
            }
        }

        function addMessage(message, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}-message`;
            messageDiv.textContent = message;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // Handle Enter key
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Focus input on load
        messageInput.focus();
    </script>
</body>
</html>
